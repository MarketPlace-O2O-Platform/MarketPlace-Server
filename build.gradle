plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'io.sentry.jvm.gradle' version '5.3.0'
}

group = 'com.appcenter'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

def queryDslDir = 'src/main/generated/queryDsl'
def sentryDir = 'src/main/generated/sentry'


sentry {
	includeSourceContext = true

	org = "d3dbe7a77dc7"
	projectName = "currumi-project"
	authToken = System.getenv("SENTRY_AUTH_TOKEN")
	additionalSourceDirsForSourceContext = [
			"src/main/java",       // 기본 자바 소스 디렉터리
			sentryDir
	]
	includeDependenciesReport = true

	autoInstallation {
		enabled = true
	}
}

// Sentry 태스크 의존성 추가
tasks.named('generateSentryBundleIdJava') {
	dependsOn(':compileJava')
}

tasks.named('sentryCollectSourcesJava') {
	dependsOn(':compileJava',':compileTestJava')
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j:8.0.32'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testRuntimeOnly 'com.h2database:h2'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0' //swagger
	implementation 'com.oracle.database.jdbc:ojdbc11'
	implementation 'org.springframework.boot:spring-boot-starter-validation' //유효성 검사
	implementation group: 'org.qlrm', name: 'qlrm', version: '4.0.1' // native 쿼리를 dto에 매핑시킬 수 있는 라이브러리
	implementation 'org.springframework.retry:spring-retry'// 특정 메서드에 재시도 기능을 제공하는 라이브러리

	// FCM 알림 기능을 위한 SDK
	implementation 'com.google.firebase:firebase-admin:9.4.3'

	// QueryDSL 설정
	implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// Spring Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-test'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// Prometheus
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'

	// Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// Sentry
	implementation 'io.sentry:sentry-logback:8.3.0'
	implementation 'io.sentry:sentry-spring-boot-starter-jakarta:8.3.0'
}

tasks.named('test') {
	useJUnitPlatform()
}
// QueryDSL 설정부
//def generated = 'src/main/generated'

// java source set 에 querydsl QClass 위치 추가
sourceSets {
	main.java.srcDirs += [ queryDslDir ]
}

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(queryDslDir))
}

// gradle clean시, 기본작업 후 QClass 디렉토리 삭제
clean.doLast {
	file(queryDslDir).deleteDir()
	file(sentryDir).deleteDir()
}